(()=>{"use strict";var __webpack_modules__={863:()=>{eval('\n;// CONCATENATED MODULE: ./src/js/compTs/modules/add-loading-attribute-image.js\nfunction addLoadingAttributeImage() {\n    const images = document.querySelectorAll("img:not([data-not-loading])");\n    images.forEach((item) => item.loading = "lazy");\n}\naddLoadingAttributeImage();\n\n;// CONCATENATED MODULE: ./src/js/compTs/modules/preloader.js\nfunction preloader() {\n    const preloaderScreen = document.querySelector("[data-prldr-screen]");\n    const preloaderContainer = preloaderScreen.querySelector(".preloader__container");\n    const percents = preloaderContainer.querySelector("[data-prldr-percent]");\n    const mediaFiles = document.querySelectorAll("img, svg");\n    const mediaItems = preloaderScreen.hasAttribute("data-prldr-wh") ? windowHeightMedia(mediaFiles) : mediaFiles;\n    let i = 0;\n    if (mediaItems.length > 0) {\n        mediaItems.forEach((item) => {\n            if (item.offsetParent === null) {\n                mediaLoading();\n            }\n            else {\n                item.complete ? mediaLoading() : item.onload = () => mediaLoading();\n            }\n        });\n    }\n    else {\n        mediaLoading(true);\n    }\n    function mediaLoading(hidden = false) {\n        if (i < mediaItems.length) {\n            i++;\n        }\n        if (percents) {\n            entryPercent(i);\n        }\n        if (i === mediaItems.length || hidden === true) {\n            document.body.classList.remove("_lock");\n            preloaderScreen.classList.add("_hide");\n        }\n    }\n    function windowHeightMedia(list) {\n        let windowHeight = document.documentElement.clientHeight;\n        const mediaInScreenArr = Array.from(list).filter((item) => {\n            let itemBoundingRect = item.getBoundingClientRect();\n            if (itemBoundingRect.top >= window.screenY &&\n                itemBoundingRect.top <= window.screenY + windowHeight ||\n                itemBoundingRect.bottom >= window.screenY &&\n                    itemBoundingRect.bottom <= window.screenY + windowHeight) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        });\n        return mediaInScreenArr;\n    }\n    function entryPercent(num = mediaItems.length) {\n        const calcPercent = (num * 100) / mediaItems.length;\n        num === mediaItems.length ? percents.innerHTML = "100" : percents.innerHTML = `${calcPercent.toFixed(1)}`;\n    }\n}\nwindow.addEventListener("DOMContentLoaded", preloader);\n\n;// CONCATENATED MODULE: ./src/js/compTs/modules/change-scroll-header-hidden.js\nfunction changeScrollHeaderHidden() {\n    const header = document.querySelector("[data-header-scroll-hidden");\n    let scrollSpeed = 20;\n    let changeClassNeeded = false;\n    let classNameNeeded = header.dataset.headerScrollHiddenClass || "header__hidden";\n    if (+header.dataset.headerScrollHidden > 0) {\n        scrollSpeed = +header.dataset.headerScrollHidden;\n    }\n    if (header.hasAttribute("data-header-scroll-hidden-class")) {\n        changeClassNeeded = true;\n    }\n    let scroll = window.scrollY;\n    let previousScroll = scroll;\n    window.addEventListener("scroll", function () {\n        scroll = window.scrollY;\n        if (scroll - previousScroll >= scrollSpeed && scroll > 0) {\n            if (changeClassNeeded) {\n                header.classList.add(classNameNeeded);\n            }\n            else {\n                header.style.transform = "translate(0, -100%)";\n            }\n        }\n        else if (scroll - previousScroll <= -scrollSpeed || scroll <= 0) {\n            if (changeClassNeeded) {\n                header.classList.add(classNameNeeded);\n            }\n            else {\n                header.style.transform = "translate(0, 0%)";\n            }\n        }\n        previousScroll = scroll;\n    });\n}\ndocument.addEventListener("DOMContentLoaded", changeScrollHeaderHidden);\nchangeScrollHeaderHidden();\n\n;// CONCATENATED MODULE: ./src/js/compTs/modules/spollers.js\nfunction spollers() {\n    const spollersList = document.querySelectorAll("[data-splrs-container]");\n    if (spollersList.length > 0) {\n        const spollersRegular = Array.from(spollersList).filter((item) => !item.dataset.splrsContainer.split(",")[0]);\n        if (spollersRegular.length) {\n            initSpollers(spollersRegular);\n        }\n        let spollersMediaQueriesArr = dataMediaQueries(spollersList, "splrsContainer");\n        if (spollersMediaQueriesArr && spollersMediaQueriesArr.length) {\n            spollersMediaQueriesArr.forEach((item) => {\n                item.matchMedia.addEventListener("change", () => {\n                    initSpollers(item.itemsArr, item.matchMedia);\n                });\n                initSpollers(item.itemsArr, item.matchMedia);\n            });\n        }\n        function initSpollers(spollersItemsArr, matchMedia = false) {\n            spollersItemsArr.forEach((spollersItem) => {\n                let spollersContainer = "item" in spollersItem ? spollersItem.item : spollersItem;\n                if (matchMedia instanceof MediaQueryList && matchMedia.matches || !matchMedia) {\n                    spollersContainer.classList.add(\'_spoller-init\');\n                    initSpollerBody(spollersContainer);\n                    spollersContainer.addEventListener("click", setSpollerAction);\n                }\n                else {\n                    spollersContainer.classList.remove("_spoller-init");\n                    initSpollerBody(spollersContainer, false);\n                    spollersContainer.removeEventListener("click", setSpollerAction);\n                }\n            });\n        }\n        function initSpollerBody(spollersContainer, hideSpollerBody = true) {\n            let spollerTitles = spollersContainer.querySelectorAll("[data-splr]");\n            if (spollerTitles.length) {\n                let spollerTitlesArr = Array.from(spollerTitles).filter((item) => item.closest("[data-splrs-container]") === spollersContainer);\n                spollerTitlesArr.forEach((item) => {\n                    let itemNextElem = item.nextElementSibling;\n                    if (hideSpollerBody) {\n                        item.removeAttribute("tabindex");\n                        if (!item.classList.contains(\'_spoller-active\')) {\n                            itemNextElem.hidden = true;\n                        }\n                    }\n                    else {\n                        item.setAttribute(\'tabindex\', \'-1\');\n                        itemNextElem.hidden = false;\n                    }\n                });\n            }\n        }\n        function setSpollerAction(e) {\n            const el = e.target;\n            if (el.closest("[data-splr]")) {\n                const spollerTitle = el.closest("[data-splr]");\n                const spollerContainer = spollerTitle.closest("[data-splrs-container]");\n                const oneSpoller = spollerContainer.hasAttribute("data-splrs-one");\n                const spollerSpeed = spollerContainer.dataset.splrsSpeed ? parseInt(spollerContainer.dataset.splrsSpeed) : 500;\n                if (!spollerContainer.querySelectorAll("._slide").length) {\n                    if (oneSpoller && !spollerTitle.classList.contains(\'_spoller-active\')) {\n                        hideSpollersBody(spollerContainer);\n                    }\n                    spollerTitle.classList.toggle(\'_spoller-active\');\n                    _slideToggle(spollerTitle.nextElementSibling, spollerSpeed);\n                }\n                e.preventDefault();\n            }\n        }\n        function hideSpollersBody(spollerContainer) {\n            console.log("hide");\n            const spollerActiveTitle = spollerContainer.querySelector(\'[data-splr]._spoller-active\');\n            const spollerSpeed = spollerContainer.dataset.splrsSpeed ? parseInt(spollerContainer.dataset.splrsSpeed) : 500;\n            if (spollerActiveTitle && !spollerContainer.querySelectorAll(\'._slide\').length) {\n                spollerActiveTitle.classList.remove(\'_spoller-active\');\n                _slideUp(spollerActiveTitle.nextElementSibling, spollerSpeed);\n            }\n        }\n        const spollersClose = document.querySelectorAll(\'[data-splr-close]\');\n        if (spollersClose.length) {\n            document.addEventListener("click", (e) => {\n                const el = e.target;\n                if (!el.closest(\'[data-splrs-container]\')) {\n                    spollersClose.forEach((item) => {\n                        const spollerContainer = item.closest(\'[data-splrs-container]\');\n                        const spollerSpeed = spollerContainer.dataset.splrsSpeed ? parseInt(spollerContainer.dataset.splrsSpeed) : 500;\n                        item.classList.remove(\'_spoller-active\');\n                        _slideUp(item.nextElementSibling, spollerSpeed);\n                    });\n                }\n            });\n        }\n    }\n}\nspollers();\nfunction dataMediaQueries(list, dataName) {\n    const mediaArr = Array.from(list).filter((item) => item.dataset.splrsContainer.split(",")[0]);\n    if (mediaArr.length) {\n        const breakpointsArr = [];\n        mediaArr.forEach((item) => {\n            const breakpointParams = item.dataset[dataName];\n            const breakpointParamsArr = breakpointParams.split(",");\n            const breakpoint = {\n                value: +breakpointParamsArr[0],\n                type: breakpointParamsArr[1] ? breakpointParamsArr[1].trim() : "max",\n                item: item\n            };\n            breakpointsArr.push(breakpoint);\n        });\n        let mediaQueries = breakpointsArr.map((item) => {\n            return \'(\' + item.type + "-width: " + item.value + "px)," + item.value + \',\' + item.type;\n        });\n        mediaQueries = uniqArray(mediaQueries);\n        const mediaQueriesArr = [];\n        if (mediaQueries.length) {\n            mediaQueries.forEach((breakpoint) => {\n                const paramsArray = breakpoint.split(",");\n                const mediaBreakpoint = +paramsArray[1];\n                const mediaType = paramsArray[2];\n                const matchMedia = window.matchMedia(paramsArray[0]);\n                const itemsArr = breakpointsArr.filter((item) => {\n                    if (item.value === mediaBreakpoint && item.type === mediaType) {\n                        return true;\n                    }\n                });\n                mediaQueriesArr.push({ itemsArr, matchMedia });\n            });\n            return mediaQueriesArr;\n        }\n    }\n}\nfunction uniqArray(arr) {\n    return arr.filter((item, index, arr) => arr.indexOf(item) === index);\n}\nlet _slideUp = (target, duration = 500, showmore = 0) => {\n    if (!target.classList.contains(\'_slide\')) {\n        target.classList.add(\'_slide\');\n        target.style.transitionProperty = \'height, margin, padding\';\n        target.style.transitionDuration = duration + \'ms\';\n        target.style.height = `${target.offsetHeight}px`;\n        target.offsetHeight;\n        target.style.overflow = \'hidden\';\n        target.style.height = showmore ? `${showmore}px` : `0px`;\n        target.style.paddingTop = "0";\n        target.style.paddingBottom = "0";\n        target.style.marginTop = "0";\n        target.style.marginBottom = "0";\n        window.setTimeout(() => {\n            target.hidden = !showmore ? true : false;\n            !showmore ? target.style.removeProperty(\'height\') : null;\n            target.style.removeProperty(\'padding-top\');\n            target.style.removeProperty(\'padding-bottom\');\n            target.style.removeProperty(\'margin-top\');\n            target.style.removeProperty(\'margin-bottom\');\n            !showmore ? target.style.removeProperty(\'overflow\') : null;\n            target.style.removeProperty(\'transition-duration\');\n            target.style.removeProperty(\'transition-property\');\n            target.classList.remove(\'_slide\');\n            // Создаем событие \n            document.dispatchEvent(new CustomEvent("slideUpDone", {\n                detail: {\n                    target: target\n                }\n            }));\n        }, duration);\n    }\n};\nlet _slideDown = (target, duration = 500, showmore = 0) => {\n    if (!target.classList.contains(\'_slide\')) {\n        target.classList.add(\'_slide\');\n        target.hidden = target.hidden ? false : null;\n        showmore ? target.style.removeProperty(\'height\') : null;\n        let height = target.offsetHeight;\n        target.style.overflow = \'hidden\';\n        target.style.height = showmore ? `${showmore}px` : `0px`;\n        target.style.paddingTop = "0";\n        target.style.paddingBottom = "0";\n        target.style.marginTop = "0";\n        target.style.marginBottom = "0";\n        target.offsetHeight;\n        target.style.transitionProperty = "height, margin, padding";\n        target.style.transitionDuration = duration + \'ms\';\n        target.style.height = height + \'px\';\n        target.style.removeProperty(\'padding-top\');\n        target.style.removeProperty(\'padding-bottom\');\n        target.style.removeProperty(\'margin-top\');\n        target.style.removeProperty(\'margin-bottom\');\n        window.setTimeout(() => {\n            target.style.removeProperty(\'height\');\n            target.style.removeProperty(\'overflow\');\n            target.style.removeProperty(\'transition-duration\');\n            target.style.removeProperty(\'transition-property\');\n            target.classList.remove(\'_slide\');\n            // Создаем событие \n            document.dispatchEvent(new CustomEvent("slideDownDone", {\n                detail: {\n                    target: target\n                }\n            }));\n        }, duration);\n    }\n};\nlet _slideToggle = (target, duration = 500) => {\n    if (target.hidden) {\n        return _slideDown(target, duration);\n    }\n    else {\n        return _slideUp(target, duration);\n    }\n};\n\n;// CONCATENATED MODULE: ./src/js/compTs/modules/dynamic-adaptive.js\nfunction dynamicAdaptive() {\n    const className = "_dynam-adapt";\n    const attrName = "data-dynam-adapt";\n    const dynamicNodesArr = getDynamicNodes();\n    const dynamicMediaQueryObjsArr = getDynamicMediaQueries(dynamicNodesArr);\n    dynamicMediaQueryObjsArr.forEach((mediaQueryObj) => {\n        const matchMedia = window.matchMedia(mediaQueryObj.query);\n        const filteredNodes = dynamicNodesArr.filter(({ breakpoint }) => breakpoint === mediaQueryObj.breakpoint);\n        const mediaHandler = getMediaHandler(matchMedia, filteredNodes);\n        matchMedia.addEventListener(\'change\', mediaHandler);\n        mediaHandler();\n    });\n    function getDynamicNodes() {\n        const result = [];\n        const elems = document.querySelectorAll(`[${attrName}]`);\n        elems.forEach((item) => {\n            const attr = item.getAttribute(attrName);\n            const attrValuesArr = attr.split(\',\').map((str) => str.trim());\n            const toSelector = attrValuesArr[0];\n            const breakpoint = parseInt(attrValuesArr[1], 10);\n            const typeBreakpoint = attrValuesArr[1].slice(-3) === "max" || attrValuesArr[1].slice(-3) === "min" ? attrValuesArr[1].slice(-3) : "max";\n            const position = +attrValuesArr[2] ? +attrValuesArr[2] : attrValuesArr[2];\n            const toElem = document.querySelector(toSelector);\n            if (toElem) {\n                result.push({\n                    parent: item.parentElement,\n                    element: item,\n                    toElem,\n                    breakpoint,\n                    typeBreakpoint,\n                    position,\n                    index: -1\n                });\n            }\n        });\n        return result;\n    }\n    function getDynamicMediaQueries(dynamicNodeArr) {\n        const mediaQueriesArr = [...new Set(dynamicNodeArr.map(({ breakpoint, typeBreakpoint }) => `(${typeBreakpoint}-width: ${breakpoint}px),${breakpoint}`))];\n        return mediaQueriesArr.map((str) => {\n            const breakpointValueArr = str.split(\',\');\n            const query = breakpointValueArr[0];\n            const breakpoint = +breakpointValueArr[1];\n            return { query, breakpoint };\n        });\n    }\n    function getMediaHandler(matchMedia, NodesArr) {\n        return function mediaHandler() {\n            if (matchMedia.matches) {\n                NodesArr.forEach((item) => {\n                    moveTo(item);\n                });\n                NodesArr.reverse();\n            }\n            else {\n                NodesArr.forEach((item) => {\n                    if (item.element.classList.contains(className)) {\n                        moveBack(item);\n                    }\n                });\n                NodesArr.reverse();\n            }\n        };\n    }\n    function moveTo(dynamicNodeObj) {\n        const toElem = dynamicNodeObj.toElem;\n        const elem = dynamicNodeObj.element;\n        const position = dynamicNodeObj.position;\n        dynamicNodeObj.index = getIndexInParent(dynamicNodeObj.element, dynamicNodeObj.element.parentElement);\n        elem.classList.add(className);\n        if (position === "first") {\n            toElem.prepend(elem);\n        }\n        else if (position === "last" || position >= toElem.children.length) {\n            toElem.append(elem);\n        }\n        else {\n            toElem.children[position].before(elem);\n        }\n    }\n    function moveBack(dynamicNodeObj) {\n        const parent = dynamicNodeObj.parent;\n        const elem = dynamicNodeObj.element;\n        const index = dynamicNodeObj.index;\n        elem.classList.remove(className);\n        if (index >= 0 && parent.children[index]) {\n            parent.children[index].before(elem);\n        }\n        else {\n            parent.append(elem);\n        }\n    }\n    function getIndexInParent(elem, parent) {\n        return [...parent.children].indexOf(elem);\n    }\n}\ndynamicAdaptive();\n\n;// CONCATENATED MODULE: ./src/js/add-header-indentation-padding.js\nfunction addHeaderIndentationPadding () {\r\n  const indentationBlock = document.querySelector(".header-indentation");\r\n  const header = document.querySelector(".header");\r\n\r\n  indentationBlock.style.padding = `${header.clientHeight}px 0 0 0`;\r\n}\r\n\r\naddHeaderIndentationPadding();\r\nwindow.addEventListener("resize", addHeaderIndentationPadding);\n;// CONCATENATED MODULE: ./src/js/create-github-correct-link.js\nfunction createGitHubCorrectLink () {\r\n  const repositoryName = "site-layout-9/";\r\n  const githubDomain = "github.io/"\r\n\r\n  const allLinks = document.querySelectorAll("a");\r\n  const filteredLinksArr = Array.from(allLinks).filter(link => link.href.slice(-1) !== "#");\r\n\r\n  filteredLinksArr.forEach(link => {\r\n    const indexStartDomain = link.href.indexOf(githubDomain);\r\n    const indexEndDomain = indexStartDomain + githubDomain.length;\r\n\r\n    link.href = link.href.slice(0, indexEndDomain) + repositoryName + link.href.slice(indexEndDomain);\r\n  })\r\n}\r\n\r\ncreateGitHubCorrectLink();\n;// CONCATENATED MODULE: ./src/js/app.js\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://gulp-project/./src/js/app.js_+_7_modules?')}},__webpack_exports__={};__webpack_modules__[863]()})();